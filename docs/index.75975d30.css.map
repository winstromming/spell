{"mappings":"AC8CA,+BAGA,sGAGA,2DAIA,wFAGA,oNAWA,iECuhEA,2BAGA,iBAGA,uDAKA,yDAIA,sDAIA,uCAGA,yFAIA,8BAGA,oDAGA,qFAIA,gDAGA,yCAEE,yDAEF,qED1lEA,+BAGA,sGAGA,2DAIA,wFAGA,oNAWA,iECuhEA,2BAGA,iBAGA,uDAKA,yDAIA,sDAIA,uCAGA,yFAIA,8BAGA,oDAGA,qFAIA,gDAGA,yCAEE,yDAEF","sources":["index.75975d30.css","code/components/Card.vue","code/components/Main.vue"],"sourcesContent":[".card > .n-card-header {\n  padding: 0;\n}\n\n.card > .n-card-header .n-card-header__main .n-button {\n  padding: var(--n-padding-top) var(--n-padding-left);\n}\n\n.card > .n-card-header .n-button__content {\n  width: 100px;\n  flex: 1;\n}\n\n.card > .n-card-header .n-button__content .card-title {\n  padding-right: var(--n-padding-left);\n}\n\n.card > .n-card-header .n-button__content .card-summary {\n  text-align: right;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  flex: 1;\n  justify-content: flex-end;\n  align-items: flex-end;\n  font-size: 85%;\n  line-height: 1.5;\n  overflow: hidden;\n}\n\n.card .n-card__action {\n  border-top: 1px solid var(--n-border-color);\n}\n\n:root {\n  --n-item-height: 50px;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  background-color: #fff;\n  overflow: hidden;\n}\n\n.n-card {\n  box-shadow: var(--n-box-shadow);\n  border-radius: 5px;\n}\n\n.n-card-header__extra {\n  flex: 1;\n  justify-content: flex-end;\n}\n\n.n-menu {\n  --n-item-height: 50px !important;\n}\n\n.n-menu.n-menu--horizontal .n-menu-item-content {\n  padding: 0 12px;\n  border-bottom: 0 !important;\n}\n\n.n-rate {\n  vertical-align: middle;\n}\n\n.n-rate__item svg circle {\n  stroke: var(--n-text-color);\n}\n\n.n-rate__item--active svg circle {\n  fill: var(--n-text-color);\n  stroke: var(--n-text-color);\n}\n\n.btn-only-icon-when-small {\n  height: auto !important;\n}\n\n@media only screen and (max-width: 660px) {\n  .btn-only-icon-when-small .n-button__icon {\n    margin-right: 0;\n  }\n\n  .btn-only-icon-when-small .n-button__content {\n    display: none !important;\n  }\n}\n\n.card > .n-card-header {\n  padding: 0;\n}\n\n.card > .n-card-header .n-card-header__main .n-button {\n  padding: var(--n-padding-top) var(--n-padding-left);\n}\n\n.card > .n-card-header .n-button__content {\n  width: 100px;\n  flex: 1;\n}\n\n.card > .n-card-header .n-button__content .card-title {\n  padding-right: var(--n-padding-left);\n}\n\n.card > .n-card-header .n-button__content .card-summary {\n  text-align: right;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  flex: 1;\n  justify-content: flex-end;\n  align-items: flex-end;\n  font-size: 85%;\n  line-height: 1.5;\n  overflow: hidden;\n}\n\n.card .n-card__action {\n  border-top: 1px solid var(--n-border-color);\n}\n\n:root {\n  --n-item-height: 50px;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  background-color: #fff;\n  overflow: hidden;\n}\n\n.n-card {\n  box-shadow: var(--n-box-shadow);\n  border-radius: 5px;\n}\n\n.n-card-header__extra {\n  flex: 1;\n  justify-content: flex-end;\n}\n\n.n-menu {\n  --n-item-height: 50px !important;\n}\n\n.n-menu.n-menu--horizontal .n-menu-item-content {\n  padding: 0 12px;\n  border-bottom: 0 !important;\n}\n\n.n-rate {\n  vertical-align: middle;\n}\n\n.n-rate__item svg circle {\n  stroke: var(--n-text-color);\n}\n\n.n-rate__item--active svg circle {\n  fill: var(--n-text-color);\n  stroke: var(--n-text-color);\n}\n\n.btn-only-icon-when-small {\n  height: auto !important;\n}\n\n@media only screen and (max-width: 660px) {\n  .btn-only-icon-when-small .n-button__icon {\n    margin-right: 0;\n  }\n\n  .btn-only-icon-when-small .n-button__content {\n    display: none !important;\n  }\n}\n\n/*# sourceMappingURL=index.75975d30.css.map */\n","<template>\n  <n-card size=\"small\" class=\"card\">\n    <template #header v-if=\"title && title.length > 0\">\n      <n-button size=\"large\" text block @click=\"!icon ? open = !open : undefined\">\n        <template #icon>\n          <slot name=\"icon\">\n            <n-icon>\n              <ChevronUp v-if=\"open == true\" />\n              <ChevronDown v-if=\"open === false\" />\n            </n-icon>\n          </slot>\n        </template>\n        <n-text strong class=\"card-title\">{{ title }}</n-text>\n        <n-text v-if=\"summary\" depth=\"3\" class=\"card-summary\" editable>{{ summary }}</n-text>\n      </n-button>\n    </template>\n    <template #header-extra>\n      <slot name=\"header\"></slot>\n    </template>\n    <template #default v-if=\"open === true\">\n      <slot name=\"content\"></slot>\n    </template>\n    <template #action v-if=\"open === true\">\n      <slot name=\"footer\"></slot>\n    </template>\n  </n-card>\n</template>\n\n<script>\nimport { ChevronDown, ChevronUp } from \"@vicons/ionicons5\"\n\nexport default {\n  components: { ChevronDown, ChevronUp },\n  props: [\"title\", \"summary\", \"collapsed\", \"icon\"],\n  data() {\n    return {\n      open: true,\n    }\n  },\n  mounted() {\n    if (this.collapsed !== undefined) this.open = !!this.collapsed\n  },\n}\n</script>\n\n<style>\n.card > .n-card-header {\n  padding: 0;\n}\n.card > .n-card-header .n-card-header__main .n-button {\n  padding: var(--n-padding-top) var(--n-padding-left);\n}\n.card > .n-card-header .n-button__content {\n  flex: 1;\n  width: 100px;\n}\n.card > .n-card-header .n-button__content .card-title {\n  padding-right: var(--n-padding-left);\n}\n.card > .n-card-header .n-button__content .card-summary {\n  flex: 1;\n  align-items: flex-end;\n  justify-content: flex-end;\n  text-align: right;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 85%;\n  line-height: 1.5;\n}\n.card .n-card__action {\n  border-top: 1px solid var(--n-border-color);\n}\n</style>\n","<template>\n  <n-config-provider :theme=\"theme\" :theme-overrides=\"{ common: { fontWeightStrong: '600' } }\">\n    <n-layout position=\"absolute\" embed style=\"height: 100%\">\n      <n-layout-header bordered style=\"height: 50px\">\n        <n-space :size=\"0\" align=\"center\">\n          <n-dropdown trigger=\"click\" @select=\"chooseCharacter\" :options=\"characterOptions\">\n            <n-button quaternary>\n              <template #icon>\n                <n-icon>\n                  <PersonCircleOutline />\n                </n-icon>\n              </template>\n              {{ caster ? caster.name : \"Choose\"}}\n            </n-button>\n          </n-dropdown>\n          <n-menu :dropdown-props=\"{ trigger: 'manual' }\" v-model:value=\"tab\" mode=\"horizontal\" :options=\"menuOptions\" />\n        </n-space>\n      </n-layout-header>\n      <n-layout embedded content-style=\"padding: 12px;\" v-if=\"tab === 'cast'\" position=\"absolute\" style=\"top: 50px; bottom: 0\">\n        <n-space vertical>\n          <!-- Info -->\n          <n-alert type=\"warning\" v-if=\"hasConfiguredCaster === false\">\n            <n-text v-if=\"caster === undefined || caster === null\">You don't have a character selected</n-text>\n            <n-text v-else>You haven't set Gnosis and Arcana for this character</n-text>\n          </n-alert>\n          <!-- <n-affix id=\"spellAffix\" v-if=\"hasConfiguredCaster === true\" :trigger-top=\"10\" position=\"absolute\" listen-to=\".n-layout-scroll-container\"> -->\n          <Card v-if=\"hasConfiguredCaster === true\" style=\"position: absolute; width: calc(100% - 24px); left: 12px; right: 12px; z-index: 10\">\n            <template #content>\n              <n-space align=\"center\" justify=\"space-between\">\n                <n-space size=\"small\" v-if=\"canCastSpell\">\n                  <n-tag size=\"small\" :bordered=\"false\" round strong :type=\"usedReach > freeReach ? 'warning' : 'success'\"> {{ usedReach }}/{{ freeReach }} Reach</n-tag>\n                  <n-tag size=\"small\" :bordered=\"false\" round strong :type=\"isDicePoolTooLow ? 'warning' : 'success'\"> {{ dicePool }} Dice</n-tag>\n                  <n-tag size=\"small\" :bordered=\"false\" round strong type=\"success\">{{ totalMana }} Mana</n-tag>\n                  <n-tag v-if=\"hasParadox\" size=\"small\" :bordered=\"false\" round strong type=\"error\">{{ paradoxDice }} Paradox</n-tag>\n                </n-space>\n                <n-space size=\"small\" v-if=\"canCastSpell === false\">\n                  <n-tag size=\"small\" disabled :bordered=\"false\" round strong>0/0 Reach</n-tag>\n                  <n-tag size=\"small\" disabled :bordered=\"false\" round strong>0 Dice</n-tag>\n                  <n-tag size=\"small\" disabled :bordered=\"false\" round strong>0 Mana</n-tag>\n                </n-space>\n                <n-space size=\"small\">\n                  <n-button class=\"btn-only-icon-when-small\" title=\"Reset\" :disabled=\"canCastSpell === false\" size=\"tiny\" type=\"error\" @click=\"reset\">\n                    <template #icon>\n                      <n-icon>\n                        <Trash />\n                      </n-icon>\n                    </template>\n                    Reset\n                  </n-button>\n                  <n-button class=\"btn-only-icon-when-small\" title=\"Cast\" :disabled=\"canCastSpell === false\" size=\"tiny\" type=\"warning\" @click=\"castSpell(spell)\">\n                    <template #icon>\n                      <n-icon>\n                        <Flash />\n                      </n-icon>\n                    </template>\n                    Cast\n                  </n-button>\n                  <n-button class=\"btn-only-icon-when-small\" title=\"Copy for Roll20\" :disabled=\"canCastSpell === false\" size=\"tiny\" type=\"info\" @click=\"copySpell(spell)\">\n                    <template #icon>\n                      <n-icon>\n                        <DocumentText />\n                      </n-icon>\n                    </template>\n                    Copy\n                  </n-button>\n                  <n-button class=\"btn-only-icon-when-small\" title=\"Save\" :disabled=\"canCastSpell === false\" size=\"tiny\" type=\"success\" @click=\"saveSpell(spell)\">\n                    <template #icon>\n                      <n-icon>\n                        <Bookmark />\n                      </n-icon>\n                    </template>\n                    Save\n                  </n-button>\n                </n-space>\n              </n-space>\n            </template>\n          </Card>\n          <!-- </n-affix> -->\n          <!-- Spell -->\n          <Card title=\"Spell\" :summary=\"spellSummary\" v-if=\"hasConfiguredCaster\" style=\"margin-top: 54px\">\n            <template #content>\n              <n-space vertical size=\"large\">\n                <n-select filterable placeholder=\"What spell are you casting?\" :value=\"chooseSpellLabel\" @update:value=\"chooseSpell\" :options=\"chooseSpellOptions\" />\n                <n-alert type=\"warning\" v-if=\"(spell.name || spell.custom) && isSpellArcanaTooHigh\">\n                  <n-text>You don't have the arcana required for this spell</n-text>\n                </n-alert>\n                <n-alert type=\"info\" v-if=\"hasPraxis(spell.name)\">\n                  <n-text>{{ spell.name }} is one of your Praxes.</n-text>\n                </n-alert>\n                <n-alert type=\"info\" v-if=\"hasRote(spell.name)\">\n                  <n-text>{{ spell.name }} is one of your Rotes (+{{ hasRote(spell.name).skill }} bonus).</n-text>\n                </n-alert>\n              </n-space>\n            </template>\n            <template #footer v-if=\"spell.name\">\n              <n-space vertical size=\"large\">\n                <n-text depth=\"3\" v-if=\"spell.description\">\n                  {{ spell.description }} <span v-if=\"spell.page\"><br />({{ spell.page }})</span>\n                </n-text>\n                <n-grid :cols=\"4\">\n                  <n-grid-item>\n                    <n-text> <b>Practice</b><br />{{ spell.practice }} </n-text>\n                  </n-grid-item>\n                  <n-grid-item>\n                    <n-text> <b>Factor</b><br />{{ spell.primaryFactor }} </n-text>\n                  </n-grid-item>\n                  <n-grid-item :span=\"2\" v-if=\"spell.roteSkills.length > 0\">\n                    <n-text> <b>Rote Skills</b><br />{{  spell.roteSkills.join(\", \") }}</n-text>\n                  </n-grid-item>\n                </n-grid>\n              </n-space>\n            </template>\n            <template #footer v-if=\"!spell.name && spell.custom\">\n              <n-space vertical size=\"large\">\n                <n-grid :cols=\"2\" :x-gap=\"10\" :y-gap=\"10\">\n                  <n-grid-item>\n                    <n-space vertical size=\"small\">\n                      <b>Name</b>\n                      <n-input v-model:value=\"spell.customName\" type=\"text\" placeholder=\"What is the spell named?\" />\n                    </n-space>\n                  </n-grid-item>\n                  <n-grid-item>\n                    <n-space vertical size=\"small\">\n                      <b>Arcana</b>\n                      <n-select placeholder=\"Choose an arcanum\" filterable v-model:value=\"spell.primaryArcana.arcana\" :options=\"arcanaOptions\" />\n                    </n-space>\n                  </n-grid-item>\n                  <n-grid-item>\n                    <n-space vertical size=\"small\">\n                      <b>Practice</b>\n                      <n-select placeholder=\"Choose a practice\" filterable :value=\"choosePracticeValue\" :options=\"choosePracticeOptions\" @update:value=\"choosePractice\" />\n                    </n-space>\n                  </n-grid-item>\n                  <n-grid-item>\n                    <n-space vertical size=\"small\">\n                      <b>Factor</b>\n                      <n-select placeholder=\"Choose a primary factor\" filterable v-model:value=\"spell.primaryFactor\" :options=\"choosePrimaryFactorOptions\" />\n                    </n-space>\n                  </n-grid-item>\n                </n-grid>\n                <n-input v-model:value=\"spell.description\" type=\"textarea\" placeholder=\"What does this spell do? Describe the effects and conditions that would apply. Entering this description is mostly useful if you are going to save the spell.\" />\n                <n-space justify=\"end\">\n                  <n-button :disabled=\"spell.primaryArcana.arcana == undefined || spell.practice === undefined || spell.customName === undefined || spell.customName === ''\" type=\"success\" @click=\"applyCustomSpell\">Create this spell</n-button>\n                </n-space>\n              </n-space>\n            </template>\n          </Card>\n          <!-- Effects -->\n          <Card title=\"Effects\" collapsed :summary=\"effectsSummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-space vertical>\n                <n-table bordered striped class=\"s-table\" style=\"margin-left: -5px; width: calc(100% + 10px)\">\n                  <tbody>\n                    <tr v-if=\"spell.custom === true\">\n                      <td>\n                        <n-switch size=\"small\" :disabled=\"true\" :value=\"spell.extraMana > 0\" />\n                      </td>\n                      <td colspan=\"2\">\n                        <n-space vertical>\n                          <b>+{{ spell.extraMana }} Mana for spell effects</b>\n                          <n-slider :tooltip=\"false\" v-model:value=\"spell.extraMana\" :min=\"0\" :max=\"10\" />\n                        </n-space>\n                      </td>\n                    </tr>\n                    <tr v-if=\"spell.custom === true\">\n                      <td>\n                        <n-switch size=\"small\" :disabled=\"true\" :value=\"spell.extraReach > 0\" />\n                      </td>\n                      <td colspan=\"2\">\n                        <n-space vertical>\n                          <b>+{{ spell.extraReach }} Reach for spell effects</b>\n                          <n-slider :tooltip=\"false\" v-model:value=\"spell.extraReach\" :min=\"0\" :max=\"10\" />\n                        </n-space>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td width=\"20\" style=\"padding-right: 0\">\n                        <n-switch size=\"small\" v-model:value=\"spell.spendWillpower\" />\n                      </td>\n                      <td width=\"150\" colspan=\"2\"><b>+1 Willpower:</b><br />Gain +3 spellcasting dice.</td>\n                    </tr>\n                    <tr>\n                      <td width=\"20\" style=\"padding-right: 0\">\n                        <n-switch size=\"small\" v-model:value=\"spell.commonEffects.changePrimaryFactor\" />\n                      </td>\n                      <td colspan=\"2\"><b>+1 Reach:</b><br />Change the primary factor.</td>\n                    </tr>\n                    <tr v-if=\"spell.custom !== true\" v-for=\"(item, index) of spell.additionalEffects\" :key=\"index\">\n                      <td v-if=\"item.cost\" width=\"20\" style=\"padding-right: 0\">\n                        <n-switch size=\"small\" :disabled=\"isEffectRestricted(item)\" :value=\"isEffectAdded(item)\" @update:value=\"toggleEffect(item)\" />\n                      </td>\n                      <td v-if=\"item.cost\" colspan=\"2\">\n                        <b>{{ item.cost.map(c => `+${c.value} ${c.type}`).join(\", \")}}</b\n                        ><b v-if=\"item.requirement\"> ({{ item.requirement.map(v => `${v.arcana} ${v.value}`).join(\", \") }})</b><b>:</b><br />\n                        {{ item.effect }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </n-table>\n              </n-space>\n            </template>\n          </Card>\n          <!-- Potency -->\n          <Card title=\"Potency\" collapsed :summary=\"potencySummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-select v-model:value=\"spell.factors.potency\" :options=\"potencyOptions\" />\n            </template>\n            <template #footer> Advanced Potency grants an additional -2 to Withstand. </template>\n          </Card>\n          <!-- Duration -->\n          <Card title=\"Duration\" collapsed :summary=\"durationSummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-select v-model:value=\"spell.factors.duration\" :options=\"durationOptions\" />\n            </template>\n            <template #footer v-if=\"spell.factors.duration === 'a6'\"> Indefinite duration requires +1 Reach and +1 Mana above the normal amount.</template>\n          </Card>\n          <!-- Casting Time -->\n          <Card title=\"Casting Time\" collapsed :summary=\"castingTimeSummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-select v-model:value=\"spell.factors.castingTime\" :options=\"castingTimeOptions\" />\n            </template>\n            <template #footer v-if=\"isAdvanced('castingTime')\"> Using more than one Yantra (or High Speech) will increase this time. </template>\n          </Card>\n          <!-- Range -->\n          <Card title=\"Range\" collapsed :summary=\"rangeSummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-select v-model:value=\"spell.factors.range\" :options=\"rangeOptions\" />\n            </template>\n            <template #footer v-if=\"spell.factors.range === 'a2'\"> Remote Viewing range requires +1 Reach above the normal amount.</template>\n          </Card>\n          <!-- Scale -->\n          <Card title=\"Scale\" collapsed :summary=\"scaleSummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-select v-model:value=\"spell.factors.scale\" :options=\"scaleOptions\" />\n            </template>\n            <template #footer> Advanced Scale doubles the number of subjects and adds 5 size per additional -2 dice penalty. </template>\n          </Card>\n          <!-- Yantras -->\n          <Card title=\"Yantras\" collapsed :summary=\"yantrasSummary\" v-if=\"canCastSpell\">\n            <template #content>\n              <n-space vertical>\n                <n-table striped v-if=\"spell.yantras.length > 0\">\n                  <tbody>\n                    <tr v-for=\"yantra, index in spell.yantras\" :key=\"index\">\n                      <td>\n                        <n-space vertical size=\"small\">\n                          <n-text strong>{{ yantra.label }}</n-text>\n                          <n-text>{{ yantra.desc }}</n-text>\n                          <n-space size=\"small\" v-if=\"yantra.yantraKey === 't2' || yantra.yantraKey === 't3'\">\n                            <n-switch size=\"small\" v-model:value=\"yantra.isDedicatedTool\" @update:value=\"(v) => updateYantraIsDedicatedTool(yantra.yantraKey, v)\" />\n                            <n-text>This is your Dedicated Tool</n-text>\n                          </n-space>\n                        </n-space>\n                      </td>\n                      <td width=\"20\" valign=\"top\" style=\"vertical-align: top\">\n                        <n-button size=\"small\" type=\"error\" @click=\"deleteYantra(yantra.yantraKey)\">\n                          <template #icon>\n                            <n-icon>\n                              <Close />\n                            </n-icon>\n                          </template>\n                        </n-button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </n-table>\n                <n-select ref=\"chooseYantraDropdown\" :options=\"yantraOptions\" :value=\"chooseYantraValue\" :render-label=\"renderYantraLabel\" filterable @update:value=\"chooseYantraFromDropdown\" />\n              </n-space>\n            </template>\n            <template #footer> Gnosis {{ caster.gnosis }} allows the use of {{ maxYantras }} yantras. </template>\n          </Card>\n          <!-- Paradox -->\n          <Card collapsed v-if=\"hasConfiguredCaster === true\" title=\"Paradox\" :summary=\"`${caster.paradox} previous paradox, ${['No', 'Few', 'Some', 'Many', 'Crowd of'][scene.witnesses]} witnesses`\">\n            <template #content>\n              <n-space vertical>\n                <n-table bordered striped class=\"s-table\" style=\"margin-left: -5px; width: calc(100% + 10px)\">\n                  <tbody>\n                    <tr>\n                      <td colspan=\"3\">\n                        <n-space vertical>\n                          <b>Number of previous paradox rolls ({{caster.paradox}})</b>\n                          <n-slider placement=\"bottom\" v-model:value=\"caster.paradox\" :min=\"0\" :max=\"10\" />\n                        </n-space>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td colspan=\"3\">\n                        <n-space vertical>\n                          <b>Number of sleeper witnesses ({{ ['None', 'One', 'Some', 'Many', 'Crowd'][scene.witnesses] }})</b>\n                          <n-slider placement=\"bottom\" v-model:value=\"scene.witnesses\" :min=\"0\" :max=\"4\" />\n                        </n-space>\n                      </td>\n                    </tr>\n                  </tbody>\n                </n-table>\n              </n-space>\n            </template>\n          </Card>\n        </n-space>\n      </n-layout>\n      <n-layout embedded content-style=\"padding: 12px;\" v-if=\"tab === 'spells'\" position=\"absolute\" style=\"top: 50px; bottom: 0\">\n        <n-space vertical>\n          <!-- Info -->\n          <n-alert type=\"warning\" v-if=\"hasConfiguredCaster === false\">\n            <n-text v-if=\"caster === undefined || caster === null\">You don't have a character selected</n-text>\n            <n-text v-if=\"caster !== undefined && caster !== null\">You haven't set Gnosis and Arcana for this character</n-text>\n          </n-alert>\n          <!-- Active -->\n          <Card v-if=\"hasConfiguredCaster === true\" :icon=\"true\" title=\"Active\" :summary=\"`(${ caster.active.length }/${ caster.gnosis })`\">\n            <template #icon>\n              <n-icon color=\"black\">\n                <FlashOutline />\n              </n-icon>\n            </template>\n            <template #content>\n              <n-space vertical>\n                <n-alert type=\"info\" v-if=\"caster.active.length === 0\">\n                  <n-text>You don't have any active spells</n-text>\n                </n-alert>\n                <Card collapsed :title=\"item.name\" :summary=\"getCreatedTimeAgo(item.id)\" v-for=\"(item) in caster.active\" :key=\"item.id\">\n                  <template #content>\n                    <n-space vertical size=\"small\">\n                      <n-text v-if=\"getFactorsSummaryFor(item)\"><b>Factors:</b> {{getFactorsSummaryFor(item)}}.</n-text>\n                      <n-text v-if=\"getEffectsSummaryFor(item)\"><b>Extra:</b> {{getEffectsSummaryFor(item)}}</n-text>\n                      <n-text v-if=\"getYantrasSummaryFor(item)\"><b>Yantras:</b> {{getYantrasSummaryFor(item)}}.</n-text>\n                    </n-space>\n                  </template>\n                  <template #footer>\n                    <n-button text strong class=\"btn-only-icon-when-small\" title=\"Stop\" size=\"small\" type=\"error\" @click=\"uncastSpell(item)\">\n                      <template #icon>\n                        <n-icon>\n                          <Ban />\n                        </n-icon>\n                      </template>\n                      Stop\n                    </n-button>\n                  </template>\n                </Card>\n              </n-space>\n            </template>\n          </Card>\n          <!-- Saved -->\n          <Card v-if=\"hasConfiguredCaster === true\" :icon=\"true\" title=\"Saved\" :summary=\"`(${ saved.length })`\">\n            <template #icon>\n              <n-icon color=\"black\">\n                <BookmarkOutline />\n              </n-icon>\n            </template>\n            <template #content>\n              <n-space vertical>\n                <n-alert type=\"info\" v-if=\"saved.length === 0\">\n                  <n-text>You don't have any saved spells</n-text>\n                </n-alert>\n                <Card :title=\"item.name\" collapsed :summary=\"getCastingSummaryFor(item)\" v-for=\"(item) in saved\" :key=\"item.id\">\n                  <template #tags>\n                    <n-space :size=\"5\">\n                      <n-tag v-if=\"getRoteOrPraxisFor(item) === 'praxis'\" size=\"small\" :bordered=\"false\" round strong style=\"text-transform: capitalize\"> Praxis </n-tag>\n                      <n-tag v-if=\"getRoteOrPraxisFor(item) === 'rote'\" size=\"small\" :bordered=\"false\" round strong style=\"text-transform: capitalize\"> Rote </n-tag>\n                      <n-tag size=\"small\" :bordered=\"false\" round strong :type=\"getUsedReachFor(item) > getFreeReachFor(item) ? 'warning' : 'success'\"> {{getUsedReachFor(item)}}/{{getFreeReachFor(item)}} Reach </n-tag>\n                      <n-tag size=\"small\" :bordered=\"false\" round strong type=\"success\"> {{getDicePoolFor(item)}} Dice </n-tag>\n                      <n-tag size=\"small\" :bordered=\"false\" round strong type=\"success\"> {{getTotalManaFor(item)}} Mana </n-tag>\n                      <n-tag size=\"small\" :bordered=\"false\" round strong type=\"error\"> {{getParadoxDiceFor(item)}} Paradox </n-tag>\n                    </n-space>\n                  </template>\n                  <template #content>\n                    <n-space vertical size=\"large\">\n                      <n-text v-if=\"getCastingSummaryFor(item)\"><b>Casting:</b> {{getCastingSummaryFor(item)}}.</n-text>\n                      <n-text v-if=\"getFactorsSummaryFor(item)\"><b>Factors:</b> {{getFactorsSummaryFor(item)}}.</n-text>\n                      <n-text v-if=\"getEffectsSummaryFor(item)\"><b>Extra:</b> {{getEffectsSummaryFor(item)}}</n-text>\n                      <n-text v-if=\"getYantrasSummaryFor(item)\"><b>Yantras:</b> {{getYantrasSummaryFor(item)}}.</n-text>\n                    </n-space>\n                  </template>\n                  <template #footer>\n                    <n-space justify=\"space-between\">\n                      <n-button class=\"btn-only-icon-when-small\" title=\"Remove\" size=\"tiny\" type=\"error\" @click=\"unsaveSpell(item)\">\n                        <template #icon>\n                          <n-icon>\n                            <Trash />\n                          </n-icon>\n                        </template>\n                        Remove\n                      </n-button>\n                      <n-space>\n                        <n-button class=\"btn-only-icon-when-small\" title=\"Cast\" size=\"tiny\" type=\"warning\" @click=\"castSpell(item)\">\n                          <template #icon>\n                            <n-icon>\n                              <Flash />\n                            </n-icon>\n                          </template>\n                          Cast\n                        </n-button>\n                        <n-button class=\"btn-only-icon-when-small\" title=\"Copy for Roll20\" size=\"tiny\" type=\"info\" @click=\"copySpell(item)\">\n                          <template #icon>\n                            <n-icon>\n                              <DocumentText />\n                            </n-icon>\n                          </template>\n                          Copy\n                        </n-button>\n                        <n-button class=\"btn-only-icon-when-small\" title=\"Edit\" size=\"tiny\" type=\"success\" @click=\"loadSpell(item)\">\n                          <template #icon>\n                            <n-icon>\n                              <Build />\n                            </n-icon>\n                          </template>\n                          Load\n                        </n-button>\n                      </n-space>\n                    </n-space>\n                  </template>\n                </Card>\n              </n-space>\n            </template>\n          </Card>\n        </n-space>\n      </n-layout>\n      <n-modal\n        :on-after-leave=\"returnToSpellTab\"\n        segmented\n        content-style=\"overflow: auto; padding: 24px\"\n        v-model:show=\"showEditCharacterModal\"\n        preset=\"card\"\n        title=\"Edit Character\"\n        :bordered=\"false\"\n        style=\"max-width: 650px; max-height: 750px; position: fixed; right: 0px; bottom: 10px; left: 0px; top: 10px;\"\n      >\n        <template #action>\n          <n-space justify=\"center\">\n            <n-button text strong type=\"error\" @click=\"removeCaster(caster.id)\" style=\"margin-right: 20px\">\n              <template #icon>\n                <n-icon>\n                  <Trash />\n                </n-icon>\n              </template>\n              I want to delete this character\n            </n-button>\n          </n-space>\n        </template>\n        <n-grid y-gap=\"12\" x-gap=\"12\" :cols=\"10\" item-responsive v-if=\"caster\">\n          <!-- Left Column -->\n          <n-gi span=\"0:10 600:4\">\n            <n-space vertical size=\"large\">\n              <!-- Details -->\n              <n-table bordered size=\"small\">\n                <thead>\n                  <tr>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>\n                      <n-space vertical size=\"small\">\n                        <n-input v-model:value=\"caster.name\" type=\"text\" placeholder=\"eg. Merlin\">\n                          <template #prefix>\n                            <n-icon>\n                              <Person />\n                            </n-icon>\n                          </template>\n                        </n-input>\n                        <n-input v-model:value=\"caster.type\" type=\"text\" placeholder=\"eg. Cabal\">\n                          <template #prefix>\n                            <n-icon>\n                              <People />\n                            </n-icon>\n                          </template>\n                        </n-input>\n                      </n-space>\n                    </td>\n                  </tr>\n                </tbody>\n              </n-table>\n              <!-- Gnosis -->\n              <n-table striped bordered size=\"small\">\n                <thead>\n                  <tr>\n                    <th>Gnosis</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>\n                      <n-rate size=\"small\" clearable :count=\"10\" v-model:value=\"caster.gnosis\">\n                        <n-icon>\n                          <EllipseOutline />\n                        </n-icon>\n                      </n-rate>\n                    </td>\n                  </tr>\n                </tbody>\n              </n-table>\n              <!-- Arcana -->\n              <n-table striped bordered size=\"small\">\n                <thead>\n                  <tr>\n                    <th colspan=\"3\">Arcana</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"(item, name) of caster.arcana\" :key=\"name\">\n                    <td width=\"20\">\n                      <n-switch size=\"small\" v-model:value=\"item.ruling\" />\n                    </td>\n                    <td width=\"76\">\n                      <n-text>{{ name }}</n-text>\n                    </td>\n                    <td align=\"right\">\n                      <n-rate size=\"small\" clearable :count=\"5\" v-model:value=\"item.level\">\n                        <n-icon>\n                          <EllipseOutline />\n                        </n-icon>\n                      </n-rate>\n                    </td>\n                  </tr>\n                </tbody>\n              </n-table>\n            </n-space>\n          </n-gi>\n          <!-- Right Column -->\n          <n-gi span=\"0:10 600:6\">\n            <n-space vertical size=\"large\">\n              <!-- Praxes-->\n              <n-space vertical size=\"small\">\n                <n-table striped bordered size=\"small\">\n                  <thead>\n                    <tr>\n                      <th colspan=\"2\">Praxes</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td colspan=\"2\">\n                        <n-select ref=\"choosePraxisDropdown\" filterable :value=\"choosePraxisValue\" placeholder=\"Choose praxis to add\" @update:value=\"(v) => choosePraxisFromDropdown(v)\" :options=\"chooseSpellOptions\" />\n                      </td>\n                    </tr>\n                    <tr v-for=\"item in caster.praxes\" :key=\"item.name\">\n                      <td width=\"15\">\n                        <n-button quaternary size=\"tiny\" type=\"error\" @click=\"removePraxisSpell(item.name)\">\n                          <template #icon>\n                            <n-icon>\n                              <Trash />\n                            </n-icon>\n                          </template>\n                        </n-button>\n                      </td>\n                      <td>\n                        <n-ellipsis :tooltip=\"false\" style=\"max-width: 260px\">\n                          <n-text>{{ item.name }}</n-text>\n                        </n-ellipsis>\n                      </td>\n                    </tr>\n                  </tbody>\n                </n-table>\n              </n-space>\n              <!-- Rotes -->\n              <n-space vertical size=\"small\">\n                <n-table striped bordered size=\"small\">\n                  <thead>\n                    <tr>\n                      <th colspan=\"3\">Rotes</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td colspan=\"3\">\n                        <n-select ref=\"chooseRoteDropdown\" filterable :value=\"chooseRoteValue\" placeholder=\"Choose rote to add\" @update:value=\"(v) => chooseRoteFromDropdown(v)\" :options=\"chooseSpellOptions\" />\n                      </td>\n                    </tr>\n                    <tr v-for=\"item in caster.rotes\" :key=\"item.name\">\n                      <td width=\"15\">\n                        <n-button quaternary size=\"tiny\" type=\"error\" @click=\"removeRoteSpell(item.name)\">\n                          <template #icon>\n                            <n-icon>\n                              <Trash />\n                            </n-icon>\n                          </template>\n                        </n-button>\n                      </td>\n                      <td>\n                        <n-ellipsis :tooltip=\"false\" style=\"max-width: 180px\">\n                          <n-text>{{ item.name }}</n-text>\n                        </n-ellipsis>\n                      </td>\n                      <td width=\"50\">\n                        <n-rate size=\"small\" clearable :count=\"5\" v-model:value=\"item.skill\">\n                          <n-icon>\n                            <EllipseOutline />\n                          </n-icon>\n                        </n-rate>\n                      </td>\n                    </tr>\n                  </tbody>\n                </n-table>\n              </n-space>\n            </n-space>\n          </n-gi>\n        </n-grid>\n      </n-modal>\n    </n-layout>\n  </n-config-provider>\n</template>\n\n<script>\nimport { ref, h } from \"vue\"\nimport { clone, max, some, capitalize, findIndex, range } from \"lodash\"\nimport { useMessage, NIcon } from \"naive-ui\"\nimport { darkTheme, lightTheme } from \"naive-ui\"\n\nimport {\n  Flash,\n  FlashOutline,\n  Ban,\n  Create,\n  People,\n  PeopleCircleOutline,\n  Person,\n  PersonCircleOutline,\n  Sparkles,\n  BatteryCharging,\n  SettingsSharp,\n  Dice,\n  Flame,\n  Skull,\n  Close,\n  Add,\n  AddCircleOutline,\n  DocumentText,\n  DocumentTextOutline,\n  Save,\n  Trash,\n  Build,\n  Bookmark,\n  BookmarkOutline,\n  ArrowUndo,\n  Reload,\n  ChevronDown,\n  ChevronUp,\n  Ellipse,\n  EllipseOutline\n} from \"@vicons/ionicons5\"\n\nimport Card from \"./Card.vue\"\n\nimport {\n  arcanaNames,\n  baseCastingTimes,\n  castingMethods,\n  factors,\n  gnosisManaLimits,\n  durations,\n  scales,\n  practices,\n  yantrasBaseData,\n} from \"../constants/constants.js\"\nimport {\n  getRoteOrPraxis,\n  getUsedReach,\n  getFreeReach,\n  getTotalMana,\n  getWithstand,\n  getYantras,\n  getPotencyPenalty,\n  getDurationPenalty,\n  getBaseCastingTime,\n  getDicePool,\n  getParadoxDice,\n  getPotencySummary,\n  getDurationSummary,\n  getCastingTimeSummary,\n  getRangeSummary,\n  getScaleSummary,\n  getYantrasSummary,\n  getDicePoolSummary,\n  getParadoxSummary,\n} from \"../constants/methods\"\nimport { spells } from \"../constants/spells.js\"\n\nfunction dots(num) {\n  return Array.from({ length: num }, () => \"•\").join(\"\")\n}\n\nconst defaultCaster = {\n  id: 0,\n  name: \"Character\",\n  type: \"Uncategorised\",\n  gnosis: 0,\n  arcana: {\n    Death: { level: 0, ruling: false },\n    Fate: { level: 0, ruling: false },\n    Forces: { level: 0, ruling: false },\n    Life: { level: 0, ruling: false },\n    Matter: { level: 0, ruling: false },\n    Mind: { level: 0, ruling: false },\n    Prime: { level: 0, ruling: false },\n    Spirit: { level: 0, ruling: false },\n    Space: { level: 0, ruling: false },\n    Time: { level: 0, ruling: false },\n  },\n  praxes: [],\n  rotes: [],\n  active: [],\n  paradox: 0,\n}\nconst defaultSpell = {\n  name: undefined,\n  isRote: false,\n  isPraxis: false,\n  practice: undefined,\n  primaryFactor: undefined,\n  primaryArcana: { arcana: undefined, level: undefined },\n  secondaryArcana: { arcana: undefined, level: undefined },\n  description: undefined,\n  effects: [],\n  additionalEffects: [],\n  commonEffects: {\n    changePrimaryFactor: false,\n  },\n  description: undefined,\n  page: undefined,\n  factors: {\n    castingTime: \"s1\",\n    potency: \"s1\",\n    range: \"s1\",\n    duration: \"s1\",\n    scale: \"s1\",\n  },\n  roteSkills: [],\n  roteSkill: 0,\n  spendWillpower: false,\n  extraReach: 0,\n  extraMana: 0,\n  yantras: [],\n  yantraAlsoDedicatedTool: null,\n  attainments: {\n    conditionalDuration: false,\n    everywhere: false,\n    permanence: false,\n    sympatheticRange: false,\n    temporalSympathy: false,\n    timeInABottle: false,\n  },\n}\nconst defaultScene = {\n  witnesses: 0,\n  withstand: 0,\n}\n\nexport default {\n  components: {\n    Card,\n    Ban,\n    SettingsSharp,\n    People,\n    PeopleCircleOutline,\n    Person,\n    Add,\n    AddCircleOutline,\n    PersonCircleOutline,\n    DocumentText,\n    DocumentTextOutline,\n    Sparkles,\n    BatteryCharging,\n    Flash,\n    FlashOutline,\n    Dice,\n    Flame,\n    Skull,\n    Trash,\n    Create,\n    Build,\n    Bookmark,\n    BookmarkOutline,\n    ArrowUndo,\n    Save,\n    Reload,\n    Close,\n    ChevronDown,\n    ChevronUp,\n    Ellipse,\n    EllipseOutline,\n  },\n  setup() {\n    const message = useMessage()\n    const container = ref(undefined)\n    const tab = ref(\"cast\")\n    const chooseCasterDropdown = ref(undefined)\n    const chooseYantraDropdown = ref(undefined)\n    const choosePraxisDropdown = ref(undefined)\n    const chooseRoteDropdown = ref(undefined)\n    // const showEditCharacterModal = ref(false)\n    return {\n      darkTheme,\n      lightTheme,\n      container: container,\n      message: message,\n      tab: tab,\n      // showEditCharacterModal,\n      chooseCasterDropdown,\n      chooseYantraDropdown,\n      choosePraxisDropdown,\n      chooseRoteDropdown,\n      // theme: lightTheme,\n    }\n  },\n  data() {\n    return {\n      caster: null,\n      casters: [],\n      scene: clone(defaultScene),\n      spell: clone(defaultSpell),\n      saved: [],\n      theme: lightTheme,\n      dark: false,\n      // chooseCasterValue: null,\n      showEditCharacterModal: false,\n      chooseYantraValue: null,\n      choosePraxisValue: null,\n      chooseRoteValue: null,\n    }\n  },\n  computed: {\n    hasConfiguredCaster() {\n      if (!this.caster) return false\n      return this.caster.gnosis > 0 && this.highestCasterArcana.length > 0\n    },\n    canCastSpell() {\n      if (this.spell.name === undefined) return false\n      if (this.isSpellArcanaTooHigh === true) return false\n      return true\n    },\n    characterOptions() {\n      let dropdown = []\n      let types = []\n\n      for (let caster of this.casters) {\n        if (types.includes(caster.type) === false) types.push(caster.type)\n      }\n\n      if (this.caster) {\n        dropdown.push({\n          label: \"Edit character\",\n          key: \"edit\",\n          icon() {\n            return h(NIcon, null, {\n              default: () => h(SettingsSharp)\n            })\n          },\n        });\n        dropdown.push({\n          key: \"d1\",\n          type: \"divider\",\n        })\n      }\n\n\n      for (let type of types) {\n        dropdown.push({\n          label: type,\n          key: type,\n          icon() {\n            return h(NIcon, null, {\n              default: () => h(People)\n            })\n          },\n          children: this.casters\n            .filter((c) => c.type === type)\n            .map((c) => {\n              return {\n                label: c.name,\n                key: c.id,\n                disabled: this.caster && this.caster.id === c.id,\n              }\n            }),\n        })\n      }\n\n      dropdown.push({\n        key: \"d2\",\n        type: \"divider\",\n      })\n\n      dropdown.push({\n        label: \"New character\",\n        key: \"create\",\n        icon() {\n          return h(NIcon, null, {\n            default: () => h(AddCircleOutline)\n          })\n        },\n      });\n\n      return dropdown\n    },\n    menuOptions() {\n      let options = []\n\n      // options.push({\n      //   label: this.caster ? this.caster.name : \"Choose\",\n      //   key: 'character',\n      //   icon() { return h(NIcon, null, { default: () => h(PersonCircleOutline) }) },\n      //   children: dropdown,\n      // })\n\n      options.push({\n        label: \"Cast\",\n        key: 'cast',\n      })\n      options.push({\n        label: `Spells (${this.caster?.active?.length || 0}/${this.caster?.gnosis || 0})`,\n        key: 'spells',\n      })\n\n      return options\n    },\n    chooseSpellLabel() {\n      if (this.spell.name === undefined && this.spell.custom) return \"Creative Thaumaturgy\"\n      if (this.spell.name !== undefined && this.spell.custom) return `${this.spell.name} (Custom)`\n      return this.spell.name\n    },\n    chooseSpellOptions() {\n      let options = []\n\n      options.push({\n        type: \"group\",\n        label: \"Custom\",\n        key: \"custom\",\n        children: [{\n          label: \"Creative Thaumaturgy\",\n          value: {\n            name: \"Creative Thaumaturgy\",\n          }\n        }]\n      })\n\n      for (let arcanaName of arcanaNames) {\n        options.push({\n          type: \"group\",\n          label: arcanaName,\n          key: arcanaName,\n          children: spells\n            .filter((s) => s.primaryArcana.arcana === arcanaName)\n            .sort((a, b) => a.primaryArcana.level - b.primaryArcana.level)\n            .map((s) => {\n              return {\n                label: `${dots(s.primaryArcana.level)} ${s.name}`,\n                value: s,\n              }\n            }),\n        })\n      }\n\n      return options\n    },\n    methodOptions() {\n      let options = []\n\n      for (let method of castingMethods) {\n        options.push({\n          label: method,\n          value: method,\n        })\n      }\n\n      return options\n    },\n    arcanaNameOptions() {\n      let options = []\n\n      for (let arcanaName of arcanaNames) {\n        options.push({\n          label: arcanaName,\n          value: arcanaName,\n        })\n      }\n\n      return options\n    },\n    highestCasterArcana() {\n      let highest = max(Object.values(this.caster.arcana).map((a) => a.level))\n      let arcanas = []\n      if (highest === 0) return arcanas\n      for (let arcana in this.caster.arcana) {\n        if (this.caster.arcana[arcana].level === highest) arcanas.push(arcana)\n      }\n      return arcanas\n    },\n    maxCasterArcana() {\n      let arcana\n\n      if (this.highestCasterArcana.includes(this.spell.primaryArcana.arcana)) {\n        if (this.caster.gnosis >= 5) {\n          arcana = 5\n        } else if (this.caster.gnosis >= 3) {\n          arcana = 4\n        } else {\n          arcana = 3\n        }\n      } else {\n        if (this.caster.gnosis >= 6) {\n          arcana = 5\n        } else if (this.caster.gnosis >= 4) {\n          arcana = 4\n        } else {\n          arcana = 3\n        }\n      }\n\n      return arcana\n    },\n    isCasterArcanaTooHigh() {\n      return this.caster.arcana[this.spell.primaryArcana.arcana].level > this.maxCasterArcana\n    },\n    isSpellArcanaTooHigh() {\n      if (this.spell.primaryArcana && this.spell.primaryArcana.arcana && this.spell.primaryArcana.level && this.caster.arcana[this.spell.primaryArcana.arcana].level < this.spell.primaryArcana.level) return true\n      if (this.spell.secondaryArcana && this.spell.secondaryArcana.arcana && this.spell.secondaryArcana.level && this.caster.arcana[this.spell.secondaryArcana.arcana].level < this.spell.secondaryArcana.level) return true\n      return false\n    },\n    freeReach() {\n      return getFreeReach(this.caster, this.spell)\n    },\n    usedReach() {\n      return getUsedReach(this.caster, this.spell)\n    },\n    roteOrPraxis() {\n      return getRoteOrPraxis(this.caster, this.spell)\n    },\n    baseParadoxDice() {\n      return Math.ceil(this.caster.gnosis / 2)\n    },\n    paradoxDice() {\n      return getParadoxDice(this.caster, this.spell, this.scene)\n    },\n    hasParadox() {\n      return (\n        this.usedReach > this.freeReach ||\n        this.caster.paradox > 0 ||\n        this.scene.witnesses > 0\n      )\n    },\n    durationPenalty() {\n      return getDurationPenalty(this.caster, this.spell)\n    },\n    potencyPenalty() {\n      return getPotencyPenalty(this.caster, this.spell)\n    },\n    dicePool() {\n      return getDicePool(this.caster, this.spell, this.scene)\n    },\n    isDicePoolTooLow() {\n      return this.dicePool < 1\n    },\n    spellFactorOptions() {\n      return [\n        {\n          label: \"Duration\",\n          value: \"Duration\",\n        },\n        {\n          label: \"Potency\",\n          value: \"Potency\",\n        },\n      ]\n    },\n    primaryFactor() {\n      return this.spell.primaryFactor\n    },\n    primaryFactorLabel() {\n      return capitalize(this.spell.primaryFactor)\n    },\n    totalWithstand() {\n      return getWithstand(this.spell, this.scene)\n    },\n    yantras() {\n      return getYantras(this.caster, this.spell)\n    },\n    maxYantras() {\n      return Math.ceil(this.caster.gnosis / 2) + 1\n    },\n    isConcentrationMantraAllowed() {\n      return this.isPrimaryFactor(\"Duration\") || this.spell.factors.duration !== \"s1\"\n    },\n    isDedicatedToolYantraUsed: {\n      cache: false,\n      // getter\n      get() {\n        if (this.hasYantra(\"t1\")) {\n          return true\n        }\n\n        return some(this.spell.yantras, [\"isDedicatedTool\", true])\n      },\n      // setter (bool)\n      set(isUsed) {\n        if (isUsed) {\n          if (this.isDedicatedToolYantraUsed) {\n            this.message.warning(\"Dedicated Tool already used\")\n          }\n          this.spell.yantras.push(this.yantras.get(\"t1\"))\n        } else {\n          this.deleteYantra(\"t1\")\n\n          for (let key of this.spell.yantras) {\n            this.spell.yantras[key].isDedicatedTool = false\n          }\n\n          this.$forceUpdate() // cache: false and this.$forceUpdate() means the getter shows updated value\n        }\n      },\n    },\n    totalMana() {\n      return getTotalMana(this.caster, this.spell)\n    },\n    maxMana() {\n      return gnosisManaLimits[this.caster.gnosis]\n    },\n    // use this to watch attainments changing\n    attainmentsByName() {\n      let attainments = []\n\n      each(this.spell.attainments, (value, key) => {\n        if (value) {\n          attainments.push(key)\n        }\n      })\n\n      return attainments\n    },\n    isSympatheticYantraMissing() {\n      return (\n        (this.spell.attainments.sympatheticRange || this.spell.attainments.temporalSympathy) &&\n        !this.hasYantra(\"t3\") &&\n        !this.hasYantra(\"t4\") &&\n        !this.hasYantra(\"t5\")\n      )\n    },\n    isCastable() {\n      return !this.isDicePoolTooLow && !this.isSympatheticYantraMissing\n    },\n    baseCastingTime() {\n      return getBaseCastingTime(this.caster)\n    },\n    arcanaOptions() {\n      let options = arcanaNames.map((arcana) => {\n        return {\n          label: arcana,\n          value: arcana,\n        }\n      });\n      return options\n    },\n    choosePracticeValue() {\n      return this.spell.practice\n    },\n    choosePracticeOptions() {\n      let options = []\n      for (let practice of practices) {\n        options.push({\n          label: `${dots(practice.level)} ${practice.name}`,\n          value: practice,\n        })\n      }\n      return options\n    },\n    choosePrimaryFactorOptions() {\n      let options = [\"Duration\", \"Potency\"].map((factor) => {\n        return {\n          label: factor,\n          value: factor,\n        }\n      });\n      return options\n    },\n    standardCastingTimeOptions() {\n      let options = [],\n        i = 0\n\n      while (i++ <= 5) {\n        let increment = this.baseCastingTime.increment * i,\n          unit = this.baseCastingTime.unit + (increment !== 1 ? \"s\" : \"\"),\n          bonus = i - 1\n\n        options.push({\n          value: \"s\" + i,\n          label: `${increment} ${unit} (+${bonus} dice)`,\n        })\n      }\n\n      return options\n    },\n    castingTimeOptions() {\n      let options = []\n      options.push({\n        type: \"group\",\n        label: \"Standard (Ritual Casting)\",\n        key: \"standard\",\n        children: this.standardCastingTimeOptions,\n      })\n      options.push({\n        type: \"group\",\n        label: \"Advanced (Quick Casting)\",\n        key: \"advanced\",\n        children: [{ value: \"a1\", label: \"1 Turn\" }],\n      })\n      return options\n    },\n    standardPotencyOptions() {\n      let options = [],\n        i = 0\n\n      while (i++ < 11) {\n        let penalty = (i - 1) * 2\n\n        if (this.isPrimaryFactor(\"Potency\")) {\n          penalty -= (this.caster.arcana[this.spell.primaryArcana.arcana].level - 1) * 2\n        }\n\n        if (penalty < 0) {\n          penalty = 0\n        }\n\n        options.push({\n          value: \"s\" + i,\n          label: `${i} (-${penalty} dice)`,\n        })\n      }\n\n      return options\n    },\n    advancedPotencyOptions() {\n      let options = []\n      let i = 0\n      while (i++ < 11) {\n        let penalty = (i - 1) * 2\n\n        if (this.isPrimaryFactor(\"Potency\")) {\n          penalty -= (this.caster.arcana[this.spell.primaryArcana.arcana].level - 1) * 2\n        }\n\n        if (penalty < 0) {\n          penalty = 0\n        }\n\n        options.push({\n          value: \"a\" + i,\n          label: `${i} (-${penalty} dice)`,\n        })\n      }\n\n      return options\n    },\n    potencyOptions() {\n      let options = []\n      options.push({\n        type: \"group\",\n        label: \"Standard\",\n        key: \"standard\",\n        children: this.standardPotencyOptions,\n      })\n      options.push({\n        type: \"group\",\n        label: \"Advanced\",\n        key: \"advanced\",\n        children: this.advancedPotencyOptions,\n      })\n      return options\n    },\n    rangeOptions() {\n      let options = []\n      options.push({\n        type: \"group\",\n        label: \"Standard\",\n        key: \"standard\",\n        children: [{ value: \"s1\", label: \"Touch\" }],\n      })\n      options.push({\n        type: \"group\",\n        label: \"Advanced\",\n        key: \"advanced\",\n        children: [\n          { value: \"a1\", label: \"Sensory\" },\n          { value: \"a2\", label: \"Remote\" },\n        ],\n      })\n      return options\n    },\n    standardDurationOptions() {\n      let options = []\n\n      for (let [key, duration] of durations) {\n        if (key[0] === \"s\") {\n          let penalty = duration.penalty\n\n          if (this.isPrimaryFactor(\"Duration\")) {\n            penalty -= (this.caster.arcana[this.spell.primaryArcana.arcana].level - 1) * 2\n          }\n\n          if (penalty < 0) {\n            penalty = 0\n          }\n\n          options.push({\n            value: key,\n            successes: key[1],\n            time: duration.time,\n            label: `${duration.time} (-${penalty} dice)`,\n          })\n        }\n      }\n\n      return options\n    },\n    advancedDurationOptions() {\n      let options = []\n\n      for (let [key, duration] of durations) {\n        if (key[0] === \"a\") {\n          let penalty = duration.penalty\n\n          if (this.isPrimaryFactor(\"Duration\")) {\n            penalty -= (this.caster.arcana[this.spell.primaryArcana.arcana].level - 1) * 2\n          }\n\n          if (penalty < 0) {\n            penalty = 0\n          }\n\n          options.push({\n            value: key,\n            successes: key[1],\n            time: duration.time,\n            label: `${duration.time} (-${penalty} dice)`,\n          })\n        }\n      }\n\n      return options\n    },\n    durationOptions() {\n      let options = []\n      options.push({\n        type: \"group\",\n        label: \"Standard\",\n        key: \"standard\",\n        children: this.standardDurationOptions,\n      })\n      options.push({\n        type: \"group\",\n        label: \"Advanced\",\n        key: \"advanced\",\n        children: this.advancedDurationOptions,\n      })\n      return options\n    },\n    standardScaleOptions() {\n      let options = []\n\n      for (let [key, scale] of scales) {\n        if (key[0] === \"s\") {\n          let s = clone(scale)\n          s.value = key\n          s.penalty = `-${scale.penalty}`\n          options.push(s)\n        }\n      }\n\n      return options\n    },\n    advancedScaleOptions() {\n      let options = []\n\n      for (let [key, scale] of scales) {\n        if (key[0] === \"a\") {\n          let s = clone(scale)\n          s.value = key\n          s.penalty = `-${scale.penalty}`\n          options.push(s)\n        }\n      }\n\n      return options\n    },\n    scaleOptions() {\n      let options = []\n      options.push({\n        type: \"group\",\n        label: \"Standard\",\n        key: \"standard\",\n        children: this.standardScaleOptions.map(({ value, number, size, area, penalty }) => {\n          return {\n            value: value,\n            label: `${number} subjects or ${area.toLowerCase()} (${penalty} dice)`,\n          }\n        }),\n      })\n      options.push({\n        type: \"group\",\n        label: \"Advanced\",\n        key: \"advanced\",\n        children: this.advancedScaleOptions.map(({ value, number, size, area, penalty }) => {\n          return {\n            value: value,\n            label: `${number} subjects or ${area.toLowerCase()} (${penalty} dice)`,\n          }\n        }),\n      })\n      return options\n    },\n    locationYantraOptions() {\n      return this.getYantraOptions(\"l\")\n    },\n    actionYantraOptions() {\n      return this.getYantraOptions(\"a\")\n    },\n    toolYantraOptions() {\n      return this.getYantraOptions(\"t\")\n    },\n    yantraOptions() {\n      return [\n        { type: \"group\", label: \"Locations\", key: \"locations\", children: this.locationYantraOptions },\n        { type: \"group\", label: \"Actions\", key: \"actions\", children: this.actionYantraOptions },\n        { type: \"group\", label: \"Tools\", key: \"tools\", children: this.toolYantraOptions },\n      ]\n    },\n    casterPraxesSummary() {\n      let summary = this.caster.praxes.map(p => p.name);\n      if (summary.length === 0) return \"None\"\n      return summary.join(\", \")\n    },\n    casterRotesSummary() {\n      let summary = this.caster.rotes.map(p => p.name);\n      if (summary.length === 0) return \"None\"\n      return summary.join(\", \")\n    },\n    gnosisSummary() {\n      let summary = \"\"\n      if (this.caster.gnosis > 0) summary += `Gnosis ${this.caster.gnosis}`\n      if (summary.length === 0) return \"None\"\n      return summary\n    },\n    arcanaSummary() {\n      let summary = []\n      for (let arcana in this.caster.arcana) {\n        let level = this.caster.arcana[arcana].level\n        if (level > 0) summary.push(`${arcana} ${level}`)\n      }\n      if (summary.length === 0) return \"None\"\n      return summary.join(\", \")\n    },\n    effectsSummary() {\n      let summary = []\n      if (this.spell.effects.length || this.spell.spendWillpower) summary.push(`${this.spell.effects.length + (this.spell.spendWillpower ? 1 : 0)}`)\n      if (this.spell.custom) {\n        if (this.spell.extraReach > 0 || this.spell.extraMana > 0) summary.push(\"Custom\")\n      }\n      if (summary.length === 0) return \"None\"\n      return \"Effects (\" + summary.join(\", \") + \")\"\n    },\n    casterTabSummary() {\n      return \"Caster\"\n    },\n    sceneTabSummary() {\n      if (!this.caster) return \"Active\"\n      return `Active (${this.caster.active.length}/${this.caster.gnosis || 0})`\n    },\n    spellSummary() {\n      let summary = \"\"\n      if (this.spell.name) summary += `${this.spell.name} (`\n      if (this.spell.primaryArcana?.arcana && this.spell.primaryArcana?.level) summary += `${this.spell.primaryArcana.arcana} ${this.spell.primaryArcana.level}`\n      if (this.spell.secondaryArcana?.arcana && this.spell.secondaryArcana?.level) summary += `, ${this.spell.secondaryArcana.arcana} ${this.spell.secondaryArcana.level}`\n      if (this.spell.name) summary += \")\"\n      if (summary.length === 0) return \"None\"\n      return summary\n    },\n    dicePoolSummary() {\n      return getDicePoolSummary(this.caster, this.spell)\n    },\n    castingTimeSummary() {\n      return getCastingTimeSummary(this.caster, this.spell)\n    },\n    durationSummary() {\n      return getDurationSummary(this.caster, this.spell)\n    },\n    potencySummary() {\n      return getPotencySummary(this.caster, this.spell)\n    },\n    rangeSummary() {\n      return getRangeSummary(this.caster, this.spell)\n    },\n    scaleSummary() {\n      return getScaleSummary(this.caster, this.spell)\n    },\n    paradoxSummary() {\n      return getParadoxSummary(this.caster, this.spell, this.scene)\n    },\n    yantrasSummary() {\n      return getYantrasSummary(this.caster, this.spell)\n    },\n  },\n  watch: {\n    caster: {\n      handler(value) {\n        localStorage.setItem(\"caster\", JSON.stringify(value))\n        if (value && value.id && this.casters.find(c => c.id === value.id) === undefined) {\n          this.casters.push(value)\n        }\n      },\n      deep: true,\n    },\n    casters: {\n      handler(value) {\n        localStorage.setItem(\"casters\", JSON.stringify(value))\n      },\n      deep: true,\n    },\n    saved: {\n      handler(value) {\n        localStorage.setItem(\"saved\", JSON.stringify(value))\n      },\n      deep: true,\n    },\n    dark: {\n      handler(value) {\n        localStorage.setItem(\"dark\", JSON.stringify(value))\n      },\n    },\n    \"spell.isRote\": function (newer, older) {\n      if (older === true && newer === false && this.hasYantra(\"a1\")) {\n        this.deleteYantra(\"a1\")\n        this.message.warning(\"Rote Skill Mudra removed\")\n      }\n        // if (this.hasYantra(\"a1\") && spell.isRote === true) {\n        //   setTimeout(() => {\n        //     let yantra = spell.yantras.findIndex((y) => y.yantraKey === \"a1\")\n        //     if (yantra.bonus !== spell.roteSkill) {\n        //       this.message.info(\"Rote Skill Mudra updated to +\" + spell.roteSkill)\n        //       spell.yantras[yantra].bonus = spell.roteSkill\n        //     }\n        //   }, 250)\n        // }\n    },\n    \"spell.commonEffects.changePrimaryFactor\": function (newer, older) {\n      const current = this.spell.primaryFactor\n      if (newer === true && current === \"Potency\") this.spell.primaryFactor = \"Duration\"\n      if (newer === true && current === \"Duration\") this.spell.primaryFactor = \"Potency\"\n      if (newer === false && current === \"Duration\") this.spell.primaryFactor = \"Potency\"\n      if (newer === false && current === \"Potency\") this.spell.primaryFactor = \"Duration\"\n    },\n    \"scene.withstand\": function (newer, older) {\n      let extraPotency = this.spell.factors.potency[1] - 1\n      let prefix = this.spell.factors.potency[0]\n      let minPotency = this.totalWithstand\n      let isStandard = prefix !== \"a\"\n\n      // Advanced Potency reduces Withstand by 2\n      if (!isStandard) minPotency -= 2\n\n      // Potency too low?\n      if (extraPotency < minPotency) {\n        this.spell.factors.potency = prefix + minPotency\n        this.message.info(`Potency (${prefix === \"s\" ? \"Standard\" : \"Advanced\"}) increased to ${minPotency}`)\n      }\n    },\n  },\n  methods: {\n    returnToSpellTab() {\n      this.tab = 'cast'\n    },\n    setDark(value) {\n      if (value === true) this.theme = darkTheme\n      if (value === false) this.theme = lightTheme\n    },\n    getFreeReachFor(spell) {\n      return getFreeReach(this.caster, spell)\n    },\n    getUsedReachFor(spell) {\n      return getUsedReach(this.caster, spell)\n    },\n    getTotalManaFor(spell) {\n      return getTotalMana(this.caster, spell)\n    },\n    getDicePoolFor(spell) {\n      return getDicePool(this.caster, spell, this.scene)\n    },\n    getParadoxDiceFor(spell) {\n      return getParadoxDice(this.caster, spell, this.scene)\n    },\n    getRoteOrPraxisFor(spell) {\n      return getRoteOrPraxis(this.caster, spell)\n    },\n    getDicePoolSummaryFor(spell) {\n      return getDicePoolSummary(this.caster, spell, this.scene)\n    },\n    getCastingTimeSummaryFor(spell) {\n      return getCastingTimeSummary(this.caster, spell)\n    },\n    getDurationSummaryFor(spell) {\n      return getDurationSummary(this.caster, spell)\n    },\n    getPotencySummaryFor(spell) {\n      return getPotencySummary(this.caster, spell)\n    },\n    getRangeSummaryFor(spell) {\n      return getRangeSummary(this.caster, spell)\n    },\n    getScaleSummaryFor(spell) {\n      return getScaleSummary(this.caster, spell)\n    },\n    getParadoxSummaryFor(spell) {\n      return getParadoxSummary(this.caster, spell, this.scene)\n    },\n    getCastingSummaryFor(spell) {\n      let summary = []\n      let method = this.getRoteOrPraxisFor(spell)\n      if (method === \"rote\") summary.push(\"Rote\")\n      if (method === \"praxis\") summary.push(\"Praxis\")\n      summary.push(`${this.getUsedReachFor(spell)}/${this.getFreeReachFor(spell)} Reach`)\n      summary.push(`${this.getDicePoolFor(spell)} Dice`)\n      summary.push(`${this.getTotalManaFor(spell)} Mana`)\n      summary.push(`${this.getParadoxDiceFor(spell)} Paradox`)\n      return summary.join(\", \")\n    },\n    getFactorsSummaryFor(spell) {\n      let summary = []\n      summary.push(`${this.getPotencySummaryFor(spell).toLowerCase()} potency`)\n      summary.push(`${this.getDurationSummaryFor(spell).toLowerCase()} duration`)\n      summary.push(`${this.getCastingTimeSummaryFor(spell).toLowerCase()} casting time`)\n      summary.push(`${this.getRangeSummaryFor(spell).toLowerCase()} range`)\n      summary.push(`${this.getScaleSummaryFor(spell).toLowerCase()}`)\n      return summary.join(\", \")\n    },\n    getEffectsSummaryFor(spell) {\n      let summary = spell.effects.map(effect => effect.effect)\n      if (spell.spendWillpower) summary.unshift(\"Willpower spent.\")\n      if (spell.commonEffects.changePrimaryFactor) summary.push(\"Changed primary factor.\")\n      if (this.caster.active >= this.caster.gnosis) summary.push(\"Casting spells above active limit.\")\n      if (spell.custom) spell.page = \"Creative, \" + spell.practice\n      return summary.join(\" \")\n    },\n    getYantrasSummaryFor(spell) {\n      return getYantrasSummary(this.caster, spell)\n    },\n    getCreatedTimeAgo(id) {\n\n      const date = new Date(id);\n      const now = new Date();\n\n      let difference = parseInt((now - date) / (1000 * 60 * 60 * 24), 10)\n      const relative = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n      if (date.getDate() === now.getDate()) difference = 0\n\n      const day = relative.format(0 - difference, \"day\")\n      let hours = date.getHours();\n      let mins = date.getMinutes();\n      if (mins < 10) mins = `0${mins}`\n\n      return `cast ${day} at ${hours}:${mins}`.toLowerCase()\n    },\n    choosePractice(practice) {\n      this.spell.practice = practice.name\n      this.spell.primaryArcana.level = practice.level\n    },\n    chooseCharacter(id) {\n      if (id === \"edit\") {\n        this.showEditCharacterModal = true\n      } else if (id === \"create\") {\n        let caster\n        caster = { ...clone(defaultCaster), id: new Date().getTime() }\n        this.setCaster(caster)\n        this.tab = 'cast'\n        this.showEditCharacterModal = true\n      } else {\n        let caster\n        caster = this.casters.find(c => c.id === id)\n        this.setCaster(caster)\n        this.tab = 'cast'\n      }\n    },\n    setCaster(caster) {\n      this.caster = caster\n      this.caster.rotes = caster.rotes || []\n      this.caster.praxes = caster.praxes || []\n      this.caster.active = caster.active || []\n      this.caster.paradox = caster.paradox || 0\n    },\n    chooseYantraFromDropdown(option) {\n      if (this.chooseYantraDropdown) {\n        this.chooseYantraDropdown.blur()\n        this.chooseYantraValue = null\n      }\n      this.addYantra(option)\n    },\n    choosePraxisFromDropdown(option) {\n      if (this.choosePraxisDropdown) {\n        this.choosePraxisDropdown.blur()\n        this.choosePraxisValue = null\n      }\n      this.caster.praxes = this.caster.praxes || []\n      this.caster.praxes.push({\n        name: option.name,\n        arcana: option.primaryArcana.arcana,\n        level: option.primaryArcana.level,\n      });\n    },\n    chooseRoteFromDropdown(option) {\n      if (this.chooseRoteDropdown) {\n        this.chooseRoteDropdown.blur()\n        this.chooseRoteValue = null\n      }\n      this.caster.rotes = this.caster.rotes || []\n      this.caster.rotes.push({\n        name: option.name,\n        arcana: option.primaryArcana.arcana,\n        level: option.primaryArcana.level,\n        skill: 0,\n      });\n    },\n    hasPraxis(name) {\n      if (!this.caster.praxes) return false;\n      return this.caster.praxes.find((s) => s.name === name)\n    },\n    hasRote(name) {\n      if (!this.caster.rotes) return false;\n      return this.caster.rotes.find((s) => s.name === name)\n    },\n    removeCaster(id) {\n      this.showEditCharacterModal = false\n      this.caster = null\n      let index = this.casters.findIndex((s) => s.id === id)\n      if (index !== -1) {\n        const name = this.casters[index].name\n        this.casters.splice(index, 1)\n        this.message.error(`${name} was removed`)\n      }\n    },\n    removePraxisSpell(name) {\n      let index = this.caster.praxes.findIndex((s) => s.name === name)\n      if (index !== -1) this.caster.praxes.splice(index, 1)\n    },\n    removeRoteSpell(name) {\n      let index = this.caster.rotes.findIndex((s) => s.name === name)\n      if (index !== -1) this.caster.rotes.splice(index, 1)\n    },\n    renderYantraLabel(option) {\n      if (option.type === \"group\") return option.label\n      return h(\n        'div',\n        {\n          style: { padding: '4px 0' },\n        },\n        [\n          h('b', option.label),\n          h('br'),\n          option.disabledWarning || option.desc,\n        ]\n      )\n    },\n    customSpell(spell) {\n      const cloned = clone(defaultSpell)\n      this.spell = cloned\n      this.spell.custom = true\n      this.spell.customName = undefined\n      this.spell.primaryArcana.arcana = undefined\n      this.spell.primaryArcana.level = undefined\n      this.spell.secondaryArcana.arcana = undefined\n      this.spell.secondaryArcana.level = undefined\n      this.spell.primaryFactor = cloned.primaryFactor\n      this.spell.roteSkill = cloned.roteSkill\n      this.spell.roteSkills = cloned.roteSkills\n      this.spell.description = cloned.description\n      this.spell.additionalEffects = cloned.additionalEffects\n      this.spell.effects = []\n      this.spell.yantras = []\n      this.spell.factors = {\n        castingTime: \"s1\",\n        potency: \"s1\",\n        range: \"s1\",\n        duration: \"s1\",\n        scale: \"s1\",\n      }\n      this.spell.page = cloned.page\n      this.spell.isPraxis = false\n      this.spell.isRote = false\n      this.spell.roteSkill = undefined\n    },\n    applyCustomSpell(spell) {\n      this.spell.name = this.spell.customName\n    },\n    chooseSpell(spell) {\n      if (spell.name === \"Creative Thaumaturgy\") {\n        return this.customSpell(spell)\n      }\n      const cloned = clone(defaultSpell)\n      this.spell = cloned\n      this.spell.name = spell.name\n      this.spell.practice = spell.practice\n      this.spell.primaryArcana.arcana = spell.primaryArcana?.arcana\n      this.spell.primaryArcana.level = spell.primaryArcana?.level\n      this.spell.secondaryArcana.arcana = spell.secondaryArcana?.arcana\n      this.spell.secondaryArcana.level = spell.secondaryArcana?.level\n      this.spell.primaryFactor = spell.primaryFactor\n      this.spell.roteSkill = spell.roteSkill\n      this.spell.roteSkills = spell.roteSkills\n      this.spell.description = spell.description\n      this.spell.additionalEffects = spell.additionalEffects\n      this.spell.effects = []\n      this.spell.yantras = []\n      this.spell.factors = {\n        castingTime: \"s1\",\n        potency: \"s1\",\n        range: \"s1\",\n        duration: \"s1\",\n        scale: \"s1\",\n      }\n      this.spell.page = spell.page\n\n      const hasPraxis = this.hasPraxis(spell.name)\n      if (hasPraxis) {\n        this.spell.isPraxis = true\n      }\n\n      const hasRote = this.hasRote(spell.name)\n      if (hasRote) {\n        this.spell.isRote = true\n        this.spell.roteSkill = hasRote.skill\n      }\n    },\n    addCommonReachEffects() {\n      let effects = []\n      effects.push({\n        cost: [{ type: \"Reach\", value: 1 }],\n        effect: \"Change the primary factor\"\n      });\n      effects.push({\n        cost: [{ type: \"Reach\", value: 1 }],\n        requirement: [{ factor: \"Range\", value: \"a1\" }],\n        effect: \"Change the range to remote viewing\"\n      });\n      effects.push({\n        cost: [{ type: \"Reach\", value: 1 }],\n        requirement: [{ factor: \"Range\", value: \"a1\" }],\n        effect: \"Change the active spells limit\"\n      });\n      effects.push({\n        cost: [{ type: \"Reach\", value: 1 }, { type: \"Mana\", value: 1 }],\n        requirement: [{ factor: \"Duration\", value: \"a\" }],\n        effect: \"Change the duration to indefinite\"\n      });\n    },\n    dots(num) {\n      return Array.from({ length: num }, () => \"•\").join(\"\")\n    },\n    isAdvanced(factorName) {\n      return this.spell.factors[factorName][0] === \"a\"\n    },\n    isPrimaryFactor(factorName) {\n      return this.spell.primaryFactor === factorName\n    },\n    setRote(value) {\n      this.spell.isRote = value\n    },\n    setPraxis(value) {\n      this.spell.isPraxis = value\n    },\n    checkAttainments() {\n      // time in a bottle requires advanced\n      if (this.spell.attainments.timeInABottle && !this.isAdvanced(\"castingTime\")) {\n        // debounce(() => {\n        //   this.spell.attainments.timeInABottle = false\n        //   Toast.create(\n        //     \"Time in a Bottle attainment requires advanced Casting Time. Deselecting attainment.\"\n        //   )\n        // })()\n      }\n\n      // permanence requires advanced\n      if (\n        this.spell.attainments.permanence &&\n        (this.spell.primaryArcana.arcana !== \"Matter\" || !this.isAdvanced(\"Duration\"))\n      ) {\n        // debounce(() => {\n        //   this.spell.attainments.permanence = false\n        //   Toast.create(\n        //     \"Permanence attainment requires advanced Duration. Deselecting attainment.\"\n        //   )\n        // })()\n      }\n\n      // everywhere requires advanced\n      if (this.spell.attainments.everywhere && !this.isAdvanced(\"scale\")) {\n        // debounce(() => {\n        //   this.spell.attainments.everywhere = false\n        //   Toast.create(\n        //     \"Everywhere attainment requires advanced Scale. Deselecting attainment.\"\n        //   )\n        // })()\n      }\n\n      // sympathy requires advanced\n      if (this.spell.attainments.sympatheticRange && !this.isAdvanced(\"range\")) {\n        // debounce(() => {\n        //   this.spell.attainments.sympatheticRange = false\n        //   Toast.create(\n        //     \"Sympathetic Range attainment requires advanced Range. Deselecting attainment.\"\n        //   )\n        // })()\n      }\n\n      // temporal sympathy requires advanced\n      if (this.spell.attainments.temporalSympathy && !this.isAdvanced(\"range\")) {\n        // debounce(() => {\n        //   this.spell.attainments.temporalSympathy = false\n        //   Toast.create(\n        //     \"Temporal Sympathy attainment requires advanced Range. Deselecting attainment.\"\n        //   )\n        // })()\n      }\n    },\n    isUniqueYantraUsed(key) {\n      let yantra = this.yantras.get(key)\n\n      // ignore non-uniques\n      if (!yantra.unique) {\n        return false\n      }\n\n      // this version is used?\n      if (this.hasYantra(key)) {\n        return true\n      }\n\n      // there are multiple version of this yantra - check for others\n      if (key.indexOf(\"_\") !== -1) {\n        let baseKey = key.split(\"_\")[0]\n        if (this.spell.yantras.some((yantra) => yantra.yantraKey.indexOf(baseKey) === 0)) {\n          return true\n        }\n      }\n\n      return false\n    },\n    getYantraOptions(prefix) {\n      let options = []\n\n      for (let [key, yantra] of this.yantras) {\n        if (key[0] === prefix) {\n          // 'l', 'a', or 't'\n          // disabled?\n          let disabledWarning\n\n          if (key === \"a1\" && this.spell.isRote === false) {\n            disabledWarning = \"Only available when casting Rotes.\"\n          }\n\n          if (key === \"a2\" && !this.isConcentrationMantraAllowed) {\n            disabledWarning = \"Duration must be more than 1 turn to use concentration.\"\n          }\n\n          if (this.isUniqueYantraUsed(key)) {\n            disabledWarning = \"Only one of this Yantra may be used.\"\n          }\n\n          if (key === \"t1\" && this.isDedicatedToolYantraUsed) {\n            disabledWarning = \"Dedicated Tool is already being used.\"\n          }\n\n          yantra.disabledWarning = disabledWarning\n          yantra.disabled = !!disabledWarning\n\n          // add to options\n          options.push(yantra)\n        }\n      }\n\n      return options\n    },\n    hasYantra(key) {\n      return some(this.spell.yantras, [\"yantraKey\", key]) // `_.matchesProperty` iteratee shorthand.\n    },\n    addYantra(key) {\n      let yantra = this.yantras.get(key)\n\n      this.spell.yantras.push(yantra)\n    },\n    deleteYantra(key) {\n      let index = findIndex(this.spell.yantras, (yantra) => yantra.yantraKey === key)\n      this.spell.yantras.splice(index, 1)\n    },\n    updateYantraIsDedicatedTool(key, newValue) {\n      let index = findIndex(this.spell.yantras, (yantra) => yantra.yantraKey === key)\n      this.spell.yantras[index].isDedicatedTool = newValue\n    },\n    isEffectRestricted(item) {\n      let answer = false\n      if (item.requirement) {\n        item.requirement.forEach(i => {\n          if (i.arcana) {\n            if (this.caster.arcana[i.arcana].level < i.value) answer = true\n          }\n          if (i.practice) {\n            if (this.spell.practice !== i.practice) answer = true\n          }\n        })\n      }\n      return answer\n    },\n    isEffectAdded(item) {\n      const existing = this.spell.effects.findIndex(added => added.effect === item.effect);\n      return existing !== -1\n    },\n    // Effects\n    toggleEffect(item) {\n      if (this.isEffectAdded(item)) {\n        this.spell.effects.splice(this.spell.effects.findIndex(added => added.effect === item.effect), 1)\n      } else {\n        this.spell.effects.push(item)\n      }\n    },\n    copySpell(spell) {\n      const out = [];\n      out.push(\"&{template:default}\");\n      out.push(`{{name=**${spell.name}** (${spell.primaryArcana.arcana} ${Array.from({ length: spell.primaryArcana.level }, v => \"&bull;\").join(\"\")})}}`)\n      out.push(`{{summary=${spell.description}\\n(${spell.page})}}`)\n      out.push(`{{casting=${this.getCastingSummaryFor(spell)}}}`)\n      out.push(`{{factors=${this.getFactorsSummaryFor(spell)}}}`)\n      out.push(`{{extras=${this.getEffectsSummaryFor(spell) || \"None\"}}}`)\n      out.push(`{{yantras=${this.getYantrasSummaryFor(spell) || \"None\"}}}`)\n      out.push(`{{=[Roll ${this.getDicePoolSummaryFor(spell)} to cast](!&#13;&#91;[&#63;{Number of dice|${this.getDicePoolFor(spell)}d10>8!>&#63;{Explodes on|10}]&#93; Successes)}}`);\n      const text = out.join(\" \");\n      navigator.clipboard.writeText(text).then(() => {\n        this.message.info(`${spell.name} was copied`)\n      });\n    },\n    loadSpell(spell) {\n      const cloned = clone(spell)\n      this.spell = { ...cloned }\n      this.spell.primaryArcana.arcana = spell.primaryArcana.arcana;\n      this.spell.primaryArcana.level = spell.primaryArcana.level;\n      this.spell.secondaryArcana.arcana = spell.secondaryArcana.arcana;\n      this.spell.secondaryArcana.level = spell.secondaryArcana.level;\n      this.message.success(`${cloned.name} was loaded`)\n    },\n    castSpell(spell) {\n      const cloned = clone(spell)\n      cloned.id = new Date().getTime()\n      this.caster.active.push(cloned)\n      this.message.warning(`${cloned.name} was cast`)\n    },\n    uncastSpell(spell) {\n      let index = findIndex(this.caster.active, (item) => item.id === spell.id)\n      this.caster.active.splice(index, 1)\n      this.message.error(`${spell.name} was stopped`)\n    },\n    saveSpell(spell) {\n      const cloned = clone(spell)\n      cloned.id = cloned.id || new Date().getTime()\n      this.saved.push(cloned)\n      this.message.success(`${cloned.name} was saved`)\n    },\n    unsaveSpell(spell) {\n      let index = findIndex(this.saved, (item) => item.id === spell.id)\n      this.saved.splice(index, 1)\n      this.message.error(`${spell.name} was removed`)\n    },\n    reset() {\n      const cloned = clone(defaultSpell)\n      this.spell = { ...cloned }\n      this.spell.primaryArcana.arcana = undefined\n      this.spell.primaryArcana.level = undefined\n      this.spell.secondaryArcana.arcana = undefined\n      this.spell.secondaryArcana.level = undefined\n      this.spell.primaryFactor = cloned.primaryFactor\n      this.spell.roteSkill = cloned.roteSkill\n      this.spell.roteSkills = cloned.roteSkills\n      this.spell.description = cloned.description\n      this.spell.additionalEffects = []\n      this.spell.effects = []\n      this.spell.yantras = []\n      this.spell.factors = {\n        castingTime: \"s1\",\n        potency: \"s1\",\n        range: \"s1\",\n        duration: \"s1\",\n        scale: \"s1\",\n      }\n      this.message.warning(\"Spell reset\")\n    },\n    log(text) {\n      console.log(text)\n    },\n  },\n  mounted() {\n    if (localStorage.getItem(\"caster\")) {\n      try {\n        let caster = JSON.parse(localStorage.getItem(\"caster\"))\n        if (caster) {\n          this.caster = caster\n          this.caster.id = this.caster.id || new Date().getTime()\n          this.caster.name = this.caster.name || \"You\"\n          this.caster.type = this.caster.type || \"Cabal\"\n          this.caster.praxes = this.caster.praxes || []\n          this.caster.rotes = this.caster.rotes || []\n          this.caster.active = this.caster.active || []\n          this.caster.paradox = this.caster.paradox || 0\n        }\n      } catch (err) {\n        console.error(err)\n        localStorage.removeItem(\"caster\")\n      }\n    }\n    if (localStorage.getItem(\"casters\")) {\n      try {\n        const casters = JSON.parse(localStorage.getItem(\"casters\"))\n        this.casters = casters\n      } catch (err) {\n        console.error(err)\n        localStorage.removeItem(\"casters\")\n      }\n    }\n    if (localStorage.getItem(\"saved\")) {\n      try {\n        this.saved = JSON.parse(localStorage.getItem(\"saved\"))\n      } catch (err) {\n        console.error(err)\n        localStorage.removeItem(\"saved\")\n      }\n    }\n    if (localStorage.getItem(\"dark\")) {\n      try {\n        this.dark = JSON.parse(localStorage.getItem(\"dark\"))\n        this.setDark(this.dark)\n      } catch (err) {\n        console.error(err)\n        localStorage.removeItem(\"dark\")\n      }\n    }\n  },\n}\n</script>\n\n<style>\n:root {\n--n-item-height: 50px;\n}\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  overflow: hidden;\n  background-color: white;\n}\n.n-card {\n  border-radius: 5px;\n  box-shadow: var(--n-box-shadow);\n}\n.n-card-header__extra {\n  flex: 1;\n  justify-content: flex-end;\n}\n.n-menu {\n  --n-item-height: 50px !important;\n}\n.n-menu.n-menu--horizontal .n-menu-item-content {\n  border-bottom: 0 !important;\n  padding: 0 12px;\n}\n.n-rate {\n  vertical-align: middle;\n}\n.n-rate__item svg circle {\n  stroke: var(--n-text-color);\n}\n.n-rate__item--active svg circle {\n  fill: var(--n-text-color);\n  stroke: var(--n-text-color);\n}\n.btn-only-icon-when-small {\n  height: auto !important;\n}\n@media only screen\n  and (max-width: 660px) {\n  .btn-only-icon-when-small .n-button__icon { margin-right: 0; }\n  .btn-only-icon-when-small .n-button__content { display: none !important; }\n}\n</style>\n"],"names":[],"version":3,"file":"index.75975d30.css.map"}